/******************************************************************************

                CS5532应用相关实现
//主要实现与RCM-6E的应用程序接口
******************************************************************************/

#ifndef __CCS5532_APP_H
#define __CCS5532_APP_H

/******************************************************************************
                             相关配置
******************************************************************************/

#define CS5532APP_TIMER_COUNT		100 //数据转换期间定义等待定时周期

/******************************************************************************
                             相关结构
******************************************************************************/
#include"CS553xDev.h"    //Spi设备定义

//此应用中使用单次转换模式,状态转换描述为:
//1.开机配置好后处于空闲模式等待
//2.任务查询到空闲时,发送启动配置通道0单次转换命令,置状态机为配置等待状态
//3在驱动回调里检查状态机为配置等待状态时,开启引脚中断,置状态机为数据等待状态
//4在引脚中断回调里检查状态机为数据等待状态时,表示数据采完了,若当前为通道1,
// 先进行外部硬件切换以准备数据,再发送读取数据命令,置状态机为转换完成状态
//5在驱动回调里检查状态机为转换完成状态时,先发送启动下一通道命令,再启动应用程序
// 回调处理数据,然后切到下一个通道,最后状态机为配置等待状态
//6重复3步循环执行

enum _CS5532App_State{//状态机
  eCS5532App_State_Idie		    =0,   //空闲
  eCS5532App_State_CfgWait          =1,   //等待配置过程中
  eCS5532App_State_DataWait	    =2,   //等待数据过程中
  eCS5532App_State_Done		    =3    //转换完成
};

struct _CS5532App{
  struct _CS553xDev CS5532Dev;  //实例化一个芯片
  unsigned char DataBuf[16];     //缓冲区定义
  enum _CS5532App_State eState; //状态机
  unsigned char Timer;         //定时器
  unsigned char Ch;            //当前采集通道
};

extern struct _CS5532App CS5532App;  //直接实例化

/******************************************************************************
                             相关函数
******************************************************************************/

//-------------------------------初始化函数-------------------------------
void CS5532App_Init (void);

//-------------------------------芯片初始化函数-----------------------------
//返回值定义为: 0xff:芯片复位错误,其它:通讯期间故障发生次数
unsigned char CS5532App_CS5532Init(void);

//-----------------------------任务函数-----------------------------
//放入一个CS5532读写周期及一个单次AD转换周期能够处理完成的系统进程中
void CS5532App_Task(void);

/******************************************************************************
                           MISO引脚中断相关(含回调函数)   
******************************************************************************/
#include "CS553xInt.h"//直接实现
//------------------------CS553xDev MISO引脚中断函数实现---------------------
//将此函数放入MISO引脚中断程序里
void CS553xDev_MisoInt(void);

//----------------------------MISO引脚中断配置回调函数-------------------------
//将此脚配置为下降沿中断模式
void CS553xDev_cbMisoIntCfg(void);

//----------------------------MISO引脚中断允许回调函数-------------------------
//清除现有中断后开启中断
//void CS553xDev_cbMisoIntEn(void);
#define CS553xDev_cbMisoIntEn() \
  do{pCS553X_INT->IC = CS553X_INT_MASK; pCS553X_INT->IE |= CS553X_INT_MASK;}while(0)

//----------------------------MISO引脚中断禁止回调函数-------------------------
//关中断后清除现有中断
//void CS553xDev_cbMisoIntDis(void);
#define CS553xDev_cbMisoIntDis() do{pCS553X_INT->IE &= ~CS553X_INT_MASK;}while(0)

/******************************************************************************
                             相关回调函数
******************************************************************************/

//------------------------片选初始化回调函数-------------------------------
//初始化定义为:相关片选输出高
//void CS5532App_cbCsInit(void);
#define CS5532App_cbCsInit() do{CfgSPI_nCS5531(); SetSPI_nCS5531();\
  OutSPI_nCS5531(); }while(0)

//---------------------CS5532App采集完数据回调函数------------------------
void CS5532App_cbFinal(unsigned char Ch, unsigned long AD);

//---------------------CS5532切换下一AdSel函数----------------------------
void CS5532App_cbSwitchAdSel(void);



#endif  //#define __CCS5532_APP_H

